Outline:
 1. Download and install (make) OpenCV
 2. Create a demo main.cpp and verify that you can build and run opencv functions from terminal
 3. Download and install CLion AND edit CMakeLists.txt in CLion project so that CLion can use OpenCV
 4. Verify that you can use OpenCV in CLion by running/debugging a demo
 5. Download and install (make) GLM
 6. Edit CMakeLists.txt in CLion project so that CLion can use GLM
 
#################### 1 ####################
# Source (with updates and changes since not everything worked): https://www.youtube.com/watch?v=6pABIQl1ZP0

### STEP 1 - UPDATING UBUNTU ###
$ sudo apt-get update
$ sudo apt-get upgrade


### STEP 2 - INSTALL DEPENDENCIES ###
$ sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev

$ sudo apt-get install python3.8-dev python3-numpy libtbb2 libtbb-dev

$ sudo apt-get install libjpeg-dev libpng-dev libtiff5-dev libdc1394-22-dev libeigen3-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev sphinx-common libtbb-dev yasm libfaac-dev libopencore-amrnb-dev libopencore-amrwb-dev libopenexr-dev libgstreamer-plugins-base1.0-dev libavutil-dev libavfilter-dev libavresample-dev


### STEP 3 - GET OPENCV ###
$ sudo -s

/home/user# cd /opt

/opt# git clone https://github.com/Itseez/opencv.git

/opt# git clone https://github.com/Itseez/opencv_contrib.git


### STEP 4 - BUILD AND INSTALL OPENCV ###

/opt# cd opencv
/opt/opencv# mkdir release
/opt/opencv# cd release/

/opt/opencv/release# cmake -D BUILD_TIFF=ON -D WITH_CUDA=OFF -D ENABLE_AVX=OFF -D WITH_OPENGL=OFF -D WITH_OPENCL=OFF -D WITH_IPP=OFF -D WITH_TBB=ON -D BUILD_TBB=ON -D WITH_EIGEN=OFF -D WITH_V4L=OFF -D WITH_VTK=OFF -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules /opt/opencv/

/opt/opencv/release# make -j4
/opt/opencv/release# make install
/opt/opencv/release# ldconfig
/opt/opencv/release# exit
$ cd ~

### STEP 5 - VERIFY INSTALLATION ###
$ sudo apt-get install libopencv-dev (to fix next line not working)
$ pkg-config --modversion opencv4

#################### 2 ####################

$ cd ~/Documents/
$ mkdir cpp_test
$ cd cpp_test
$ touch main.cpp

# Download https://en.wikipedia.org/wiki/Lenna#/media/File:Lenna_(test_image).png into folder

# Make this main.cpp file:
```
#include <opencv2/highgui.hpp>
#include <iostream>

int main(int argc, char** argv){

	cv::Mat image;
	image = cv::imread("Lenna_(test_image).png", cv::IMREAD_UNCHANGED);

	if(!image.data){
		std::cout <<  "Could not open or find the image" << std::endl ;
		return -1;
	}

	cv::namedWindow("Display window", cv::WINDOW_AUTOSIZE);
	cv::imshow("Display window", image);

	cv::waitKey(0);
	return 0;
}
```

# Building
$ g++ main.cpp -o output `pkg-config --cflags --libs opencv4`
# Run
$ ./output

#################### 3 ####################

# Follow the CLion section of this video (last part): 
# https://www.youtube.com/watch?v=i1K9rXiei9I
# This includes running CLion and changing CMakeLists.txt

#################### 4 ####################

# Then use this main.cpp to test (different headers from before):
```
#include <opencv2/highgui.hpp>
#include <iostream>

int main(int argc, char** argv){

	cv::Mat image;
	image = cv::imread("Lenna_(test_image).png", cv::IMREAD_UNCHANGED);

	if(!image.data){
		std::cout <<  "Could not open or find the image" << std::endl ;
		return -1;
	}

	cv::namedWindow("Display window", cv::WINDOW_AUTOSIZE);
	cv::imshow("Display window", image);

	cv::waitKey(0);
	return 0;
}
```

# Verify by running and debugging main.cpp

#################### 5 ####################
# Source (with changes): https://rizaldijs.wordpress.com/2017/10/28/setting-up-glfw-glad-with-clion-on-ubuntu/

# Run:
$ cd ~
$ mkdir ClonedLibraries
$ cd ClonedLibraries
$ git clone https://github.com/g-truc/glm.git
$ cd glm
$ cmake ./
$ make
$ sudo make install

#################### 6 ####################

# Add these lines to your CMakeLists.txt file in the CLion project (change your_project_main.cpp and your_project_name):
set(SOURCE_FILES glad.c your_project_main.cpp)
target_link_libraries(your_project_name GL)

#################### 7 ####################

#Test everything by updating main.cpp to this and running/debugging:

```
#include <opencv2/highgui.hpp>
#include <iostream>

// Include all GLM core / GLSL features
#include <glm/glm.hpp> // vec2, vec3, mat4, radians

// Include all GLM extensions
#include <glm/ext.hpp> // perspective, translate, rotate

glm::mat4 transform(glm::vec2 const& Orientation, glm::vec3 const& Translate, glm::vec3 const& Up)
{
    glm::mat4 Proj = glm::perspective(glm::radians(45.f), 1.33f, 0.1f, 10.f);
    glm::mat4 ViewTranslate = glm::translate(glm::mat4(1.f), Translate);
    glm::mat4 ViewRotateX = glm::rotate(ViewTranslate, Orientation.y, Up);
    glm::mat4 View = glm::rotate(ViewRotateX, Orientation.x, Up);
    glm::mat4 Model = glm::mat4(1.0f);
    return Proj * View * Model;
}

int main(int argc, char** argv){

	cv::Mat image;
	image = cv::imread("Lenna_(test_image).png", cv::IMREAD_UNCHANGED);

	if(!image.data){
		std::cout <<  "Could not open or find the image" << std::endl ;
		return -1;
	}

	cv::namedWindow("Display window", cv::WINDOW_AUTOSIZE);
	cv::imshow("Display window", image);

	cv::waitKey(0);
	return 0;
}
```


